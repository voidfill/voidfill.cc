---
import { ViewTransitions } from "astro:transitions";
import Nav from "../components/Nav.astro";
import "./layout.css";

interface Props {
	title: string;
	description?: string;
	nav?: boolean;
}

const { title, description, nav = true } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		{description && <meta name="description" content={description} />}
		<meta name="viewport" content="width=device-width" />
		<title>{title}</title>
		<link rel="icon" href="https://avatars.githubusercontent.com/u/71205200?size=64" type="image/png" />
		<link rel="sitemap" href="/sitemap-index.xml" />

		<link rel="preload" href="/fonts/zilla/ZillaSlab-SemiBold.woff2" as="font" type="font/woff2" crossorigin="anonymous" />
		<link rel="preload" href="/fonts/zilla/ZillaSlab-Bold.woff2" as="font" type="font/woff2" crossorigin="anonymous"/>
		<link rel="preload" href="/fonts/inter/Inter-Regular.woff2" as="font" type="font/woff2" crossorigin="anonymous"/>

		<link href="/fonts/zilla/zillaslab.css" rel="stylesheet" />
		<link href="/fonts/inter/inter.css" rel="stylesheet" />
		<ViewTransitions />
	</head>
	<body
		data-theme={"dark"}
		class="no-transition"
		style={{ "--mouse-x": "0px", "--mouse-y": "0px", "--mouse-mult": "0%", "--mouse-width": "100vw" }}
	>
		<div class="root">
			<div class="background">
				{nav && <Nav />}
				<div class="content">
					{nav && <div class="spacer" />}
					<div>
						<slot />
					</div>
					<div class="spacer"></div>
				</div>
			</div>
		</div>
		<script>
			import "../signals";
		</script>
		<script>
			const touchDevice = !!(navigator.maxTouchPoints || "ontouchstart" in document.documentElement);

			let lastX = 0,
				lastY = 0,
				currentBody = document.body;
			function MouseIn() {
				currentBody.style.setProperty("--mouse-mult", "100%");
				currentBody.style.setProperty("--mouse-width", "40");
			}
			function MouseOut() {
				currentBody.style.setProperty("--mouse-mult", "0%");
				currentBody.style.setProperty("--mouse-width", "100");
			}

			document.addEventListener("astro:before-swap", (e) => {
				const body = e.newDocument.body;
				body.classList.add("no-transition");
				body.style.setProperty("--mouse-x", lastX + "px");
				body.style.setProperty("--mouse-y", lastY + "px");
				currentBody = body;
				MouseIn();

				setTimeout(() => {
					currentBody.style.setProperty("--mouse-x", lastX + "px");
					currentBody.style.setProperty("--mouse-y", lastY + "px");
					currentBody.classList.remove("no-transition");
				}, 300);
			});

			setTimeout(() => {
				document.body.classList.remove("no-transition");
			}, 300);

			if (!touchDevice) {
				document.addEventListener("mouseout", (e) => {
					if (e.relatedTarget !== null) return; // Ignore if the mouse is still in the window
					MouseOut();
				});

				document.addEventListener("mousemove", (e) => {
					lastX = e.clientX;
					lastY = e.clientY;
					currentBody.style.setProperty("--mouse-x", e.clientX + "px");
					currentBody.style.setProperty("--mouse-y", e.clientY + "px");
					MouseIn();
				});
			}
		</script>
	</body>
</html>
